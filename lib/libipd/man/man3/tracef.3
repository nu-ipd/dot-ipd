.\" Manual page for ipd.h
.TH TRACEF 3 "October 26, 2020" "libipd 2020.3.6" "IPD"
.\"
.SH NAME
.B tracef
\- a simple tracing facility
.\"
.SH SYNOPSIS
.B "#define ENABLE_TRACEF"
.br
.B "#include <ipd.h>"
.PP
void
.br
\fBtracef\fR( const char * \fIformat\fR, \fI...\fR );
.\"
.SH DESCRIPTION
This macro provides a simple tracing facility that is easily
turned on and off without removing the tracing statements.
The arguments to
.BR tracef ()
are the same as the arguments to
.BR printf (3),
but there are two main differences:
.IP \(bu
.BR tracef ()
prints to
.BR stderr (4),
not
.BR stdout (4).
.IP \(bu
.BR tracef ()
only produces output if the C preprocessor macro
.B ENABLE_TRACEF
is \fB#define\fRd before the \fI<ipd.h>\fR header is
\fB#include\fRd. Thus, to turn on tracing, put the \fB#define\fR above
the \fB#include\fR; to disable it, remove or comment out the
\fB#define\fR.
.PP
Essentially, this means you can do \[lq]printf\[rq]\-style debugging to
see what\(aqs going on, and then disable the output without having to
remove the all the calls to
.BR tracef ().
.\"
.SH EXAMPLE
.PP
.nf
.EX
/* Comment out next line to suppress output: */
.B "#define ENABLE_TRACEF"
.B "#include <ipd.h>"

int \fImain\fR( void )
{
    int \fIx\fR = 3, \fIy\fR = 4;
    \fBtracef\fR("%d + %d == %d\fI\\n\fR", \fIx\fR, \fIy\fR, \fIx\fR + \fIy\fR)\;
}
.EE
.fi
.\"
.SH AUTHOR
Jesse Tov <\fIjesse@cs\.northwestern\.edu\fR>
.\"
.SH SEE ALSO
.BR fprintf (3),
.BR printf (3),
.BR stderr (4)
